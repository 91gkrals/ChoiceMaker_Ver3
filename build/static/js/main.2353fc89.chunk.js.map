{"version":3,"sources":["libs/LineDivider.js","img/Logo1.png","views/TodoEditFormView.js","IDGenerator.js","containers/TodoEditFormContainer.js","views/TodoListView.js","containers/TodoListContainer.js","containers/SearchbarContainer.js","ErrorBoundary.js","App.js","reportWebVitals.js","stores/TodoStore.js","index.js"],"names":["React","Component","Wrapper","styled","div","EachBlock","ValDimension","SubmitStyle","TodoEditFormView","observer","val","idx","console","log","e","sdf","touches","target","outerText","this","props","todo","onSetTodoProps","onAddTodo","onUpdateTodo","onRemoveTodo","resultNum","onSubmitDecision","classes","noValidate","Grid","container","spacing","item","xs","src","logo","width","justify","alignItems","Tooltip","title","enterTouchDelay","leaveTouchDelay","style","height","Fab","color","minHeight","fontSize","TextField","InputLabelProps","shrink","InputProps","placeholder","fullWidth","margin","id","label","variant","value","onChange","event","utils","DateFnsUtils","format","date","valueOf","KeyboardButtonProps","gachi","Slider","scoreScale","defaultValue","newValue","valueLabelDisplay","step","marks","min","max","className","thumb","extraScore","Button","startIcon","size","onClick","isNaN","PureComponent","withStyles","theme","root","backgroundColor","generateId","length","chars","split","Math","floor","random","str","i","TodoEditFormContainer","inject","autobind","name","todoStore","setTodoProps","addTodo","updateTodo","removeTodo","submitDecision","TodoListView","state","todos","onSelectedTodo","selectedID","TableContainer","component","Paper","Table","m","TableHead","TableRow","TableCell","align","TableBody","Array","isArray","map","todoItem","hover","setState","rowSelectedHander","selected","tableRow","tableCell","TodoListContainer","selectedTodo","searchText","filter","undefined","toLowerCase","indexOf","SearchbarContainer","setSearchText","startAdornment","InputAdornment","position","onChangeSearchText","ErrorBoundary","error","errorInfo","whiteSpace","toString","componentStack","children","App","Container","Box","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","makeObservable","_todo","toJS","_todos","_searchText","_resultNum","push","foundTodo","find","index","findIndex","splice","sum","Number","resultScore","toFixed","observable","computed","action","ReactDOM","render","TodoStore","document","getElementById"],"mappings":"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","file":"static/js/main.2353fc89.chunk.js","sourcesContent":["import React from 'react';\r\nimport { View } from 'react-native';\r\n\r\n\r\nclass LineDivider extends React.Component {\r\n    render() {\r\n        const style = {\r\n            borderBottomColor: this.props.color,\r\n            borderBottomWidth: 1,\r\n            marginTop: 10,\r\n            marginLeft: 5,\r\n            marginRight: 5\r\n        }\r\n\r\n        return (\r\n            <div>\r\n                <View style={style} />\r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\n\r\nexport default LineDivider","export default __webpack_public_path__ + \"static/media/Logo1.3e4ae8b0.png\";","import 'date-fns';\nimport React, { PureComponent } from 'react';\n// 머터리얼 UI\nimport { TextField, Grid, Button, Radio, RadioGroup, Slider, Tooltip, IconButton, Fab } from '@material-ui/core';\nimport FormControlLabel from '@material-ui/core/FormControlLabel';\nimport { MuiPickersUtilsProvider, KeyboardDatePicker } from '@material-ui/pickers';\nimport { InputLabel, InputProps } from '@material-ui/core';\nimport { withStyles } from '@material-ui/core/styles';\nimport { sizing } from '@material-ui/system';\n\nimport SaveIcon from '@material-ui/icons/Save';\nimport DeleteIcon from '@material-ui/icons/Delete';\nimport UpdateIcon from '@material-ui/icons/Update';\nimport HelpOutlineIcon from '@material-ui/icons/HelpOutline';\nimport DateFnsUtils from '@date-io/date-fns';\nimport { observer } from 'mobx-react';\n\nimport LineDivider from '../libs/LineDivider';\nimport styled from 'styled-components';\n\nimport logo from '../img/Logo1.png';\nimport '../GlobalStyle.css';\nimport { red } from '@material-ui/core/colors';\n\nlet Wrapper = styled.div`\n  width:100%;\n  background-color:lightgray;\n`;\n\nlet EachBlock = styled.div`\n  margin-top:12px;\n  margin: 12px 0px;\n  padding-bottom:20px;\n  color:black;\n  background-color:white;\n`;\n\nconst ValDimension = styled.div`\n  font-size:12px;\n  line-height: 42px;\n  color: black;\n`;\n\n\nlet SubmitStyle = styled.div`\n  padding-top:10px;\n`;\n\nconst styles = theme => ({\n  root: {\n    backgroundColor: 'pink'\n  },\n  thumb: {\n    \"& .MuiSlider-markLabel\": {\n      color: 'skyblue',\n      fontSize: 5\n    }\n  }\n});\n\n\n\n@observer\nclass TodoEditFormView extends PureComponent {\n\n\n  getValueText(val, idx) {\n    console.log(val);\n    console.log(idx);\n  }\n\n  getChangedVal(e) {\n    console.log(e);\n    var sdf = e.touches[0].target.outerText;\n    console.log(sdf);\n\n  }\n\n\n\n\n  render() {\n\n    const { todo, onSetTodoProps, onAddTodo, onUpdateTodo, onRemoveTodo, resultNum, onSubmitDecision } = this.props;\n\n    const guideTalk1 = `사람은 일상의 매순간 다양한 선택지 중 하나를 선택을 하며 살아갑니다.\n                        하지만 뒤돌아서면 과연 옳은 결정이었는지 고민될 때가 많죠.\n                        대표적인 난제 중 하나죠. 짜장면 짬뽕을 고민하다 짜장면을 먹었는데 짬뽕의 국물이 그리워지며 미련이 남기도 하죠.\n                        아무튼 우린 A와 B 중 하나는 선택해야 합니다.\n                        하지만 내가 내린 결정이 최선의 결정이었다고 생각한다면 적어도 미련이 남진 않을 겁니다.\n                        이 앱은 특정 결정을 내리기에 앞서 다양한 평가항목을 추가하고, 결정을 점수화하여 수치로서 결정의 품질을 안내합니다.`;\n    const guideTalk2 = \"가령 음식점을 고를 때 중요하게 생각하는 평가항목이라고 한다면 가격을 예로 들 수 있습니다. 선택 후 점수를 선택해 주세요. 점수가 높을수록 결정에 긍정적으로 작용합니다.\";\n    const guideTalk3 = \"평가항목과 점수를 입력하고 ADD 버튼을 클릭하여 추가합니다. 추가된 항목은 하단 [평가목록]에서 선택 후 UPDATE, DELETE 버튼을 통해 내용을 수정, 삭제할 수 있습니다.\";\n    const guideTalk4 = `점수와 가산점을 합산하여 평균을 낸 점수입니다. NPS의 지표로는 \n    다음과 같이 그룹화할 수 있습니다. 0-6 – 부정 / 7-8 – 중립 / 9-10 – 긍정. 하지만 이 앱은 5점을 보통/중립으로 가정하였기 때문에 5점이상의 척도라면\n    긍정적으로 검토하셔도 좋습니다.`\n\n\n    //슬라이더 라벨\n    const marks = [\n      {\n        value: 0,\n        label: '나쁨',\n        style: { color: 'red' }\n      },\n      {\n        value: 10,\n        label: '좋음'\n      }\n    ]\n\n\n    const { classes } = this.props;\n\n    const handleSliderChange = (event, newValue) => {\n      onSetTodoProps('test', newValue);\n    }\n\n\n    return (\n\n      <form noValidate>\n\n        <Wrapper>\n          <EachBlock>\n            <Grid container spacing={3}>\n              <Grid item xs={10}>\n                {/* <h2 className={classes.root}>결정장애 극복 시스템</h2> */}\n                <img src={logo} width={260} />\n              </Grid>\n              <Grid\n                item xs={2}\n                container justify='center'\n                alignItems='center'>\n                <Tooltip\n                  title={guideTalk1}\n                  enterTouchDelay={10}\n                  leaveTouchDelay={20000}\n                  style={{ width: 10, height: 5 }}\n                >\n                  <Fab color=\"primary\" style={{ height: 5, width: 20, minHeight: 20 }} >\n                    <HelpOutlineIcon style={{ fontSize: 'small' }} />\n                  </Fab>\n                </Tooltip>\n              </Grid>\n            </Grid>\n\n          </EachBlock>\n          <EachBlock>\n            <Grid item xs={12}>\n              <TextField\n                InputLabelProps={{ shrink: true, style: { color: 'black' } }}\n                InputProps={{ style: { fontSize: 12 } }}\n                placeholder=\"(예) 점심메뉴: xx냉면집 대신 △△초밥집 어떨까\"\n                fullWidth\n                margin=\"normal\"\n                id=\"outlined-basic\"\n                label=\"안건\"\n                variant=\"standard\"\n                value={todo && todo.title ? todo.title : ''}\n                onChange={(event) => onSetTodoProps('title', event.target.value)}\n              />\n            </Grid>\n            <Grid item xs={6}>\n              <MuiPickersUtilsProvider utils={DateFnsUtils}>\n                <KeyboardDatePicker\n                  InputLabelProps={{ shrink: true, style: { color: 'black' } }}\n                  InputProps={{ style: { fontSize: 12, color: 'gray' } }}\n                  style={{ width: 220 }}\n                  margin=\"normal\"\n                  id=\"date-picker-dialog\"\n                  label=\"결정기한\"\n                  placeholder=\"(예) 2021-08-30\"\n                  format=\"yyyy-MM-dd\"\n                  value={todo && todo.date ? todo.date : null}\n                  onChange={(date) => onSetTodoProps('date', date.valueOf())}\n                  KeyboardButtonProps={{\n                    'aria-label': 'change date',\n                  }}\n                />\n              </MuiPickersUtilsProvider>\n            </Grid>\n          </EachBlock>\n\n          <EachBlock>\n            <Grid container>\n              <Grid item xs={5} >\n                <TextField\n                  InputLabelProps={{ shrink: true, style: { color: 'black' } }}\n                  InputProps={{ style: { fontSize: 12, color: 'gray' } }}\n                  placeholder=\"(예) 가성비\"\n                  margin=\"normal\"\n                  fullWidth\n                  id=\"gachi\"\n                  label=\"평가항목\"\n                  value={todo && todo.gachi ? todo.gachi : ''}\n                  onChange={(event) => onSetTodoProps('gachi', event.target.value)}\n                />\n              </Grid>\n              <Grid\n                item xs={1}\n                container justify='center'\n                alignItems='center'\n              >\n                <Tooltip\n                  title={guideTalk2}\n                  enterTouchDelay={10}\n                  leaveTouchDelay={20000}\n                  style={{ width: 10, height: 5 }}>\n                  <Fab color=\"primary\" style={{ height: 5, width: 20, minHeight: 20 }} >\n                    <HelpOutlineIcon style={{ fontSize: 'small' }} />\n                  </Fab>\n                </Tooltip>\n              </Grid>\n            </Grid>\n\n            <Grid item xs={3}>\n              <ValDimension>점수</ValDimension>\n            </Grid>\n\n            <Grid>\n              <Slider\n                value={todo && todo.scoreScale ? todo.scoreScale : 5}\n                defaultValue={5}\n                //getAriaValueText={this.getValueText}\n                onChange={(event, newValue) => onSetTodoProps('scoreScale', newValue || 5)}\n                aria-labelledby=\"discrete-slider\"\n                valueLabelDisplay=\"auto\"\n                step={1}\n                marks={marks}\n                min={0}\n                max={10}\n                className={classes.thumb}\n              />\n            </Grid>\n\n            <Grid item xs={3}>\n              <ValDimension>가산점</ValDimension>\n            </Grid>\n            <Grid>\n              <Slider\n                value={todo && todo.extraScore ? todo.extraScore : 0}\n                defaultValue={0}\n                onChange={(event, newValue) => onSetTodoProps('extraScore', newValue || 0)}\n                aria-labelledby=\"discrete-slider\"\n                valueLabelDisplay=\"auto\"\n                step={2}\n                marks\n                min={0}\n                max={6}\n              />\n            </Grid>\n\n            <Grid container>\n              <Grid>\n                <Button variant='contained' color='primary' startIcon={<SaveIcon />} size='small'\n                  onClick={onAddTodo}>Add</Button>&nbsp;&nbsp;\n                <Button variant='contained' color='default' startIcon={<UpdateIcon />} size='small'\n                  onClick={onUpdateTodo}>Update</Button>&nbsp;&nbsp;\n                <Button variant='contained' color='secondary' startIcon={<DeleteIcon />} size='small'\n                  onClick={onRemoveTodo}>Delete</Button>&nbsp;&nbsp;\n              </Grid>\n              <Grid\n                item xs={1}\n                container justify='center'\n                alignItems='center'\n              >\n                <Tooltip\n                  title={guideTalk3}\n                  enterTouchDelay={10}\n                  leaveTouchDelay={20000}\n                  style={{ width: 10, height: 5 }}>\n                  <Fab color=\"primary\" style={{ height: 5, width: 20, minHeight: 20 }} >\n                    <HelpOutlineIcon style={{ fontSize: 'small' }} />\n                  </Fab>\n                </Tooltip>\n              </Grid>\n            </Grid>\n          </EachBlock>\n\n          <EachBlock>\n            <Grid container>\n              <Grid>\n                <SubmitStyle>\n                  <Button variant='contained' color='primary' startIcon={<SaveIcon />}\n                    onClick={onSubmitDecision}>제출</Button>\n                  {isNaN(resultNum) ? \"올바르지 않은 값을 입력하였습니다. 평가목록을 확인해 주세요.\" : `결과점수: ${resultNum}  입니다.`}\n                </SubmitStyle>\n              </Grid>\n              <Grid\n                item xs={1}\n                container justify='center'\n                alignItems='center'\n              >\n                <Tooltip\n                  title={guideTalk4}\n                  enterTouchDelay={10}\n                  leaveTouchDelay={20000}\n                  style={{ width: 10, height: 5 }}>\n                  <Fab color=\"primary\" style={{ height: 5, width: 20, minHeight: 20 }} >\n                    <HelpOutlineIcon style={{ fontSize: 'small' }} />\n                  </Fab>\n                </Tooltip>\n              </Grid>\n            </Grid>\n          </EachBlock>\n\n        </Wrapper>\n\n      </form >\n    )\n  }\n}\n\nexport default withStyles(styles)(TodoEditFormView);\n\n\n{/* LEGACY\n\n<LineDivider color='gray' /> \n\n\n\n              <RadioGroup row aria-label=\"gender\" name=\"score_scale\" id=\"radio_scale\"\n                style={{ display: 'flex' }} onChange={(event) => onSetTodoProps('scoreScale', event.target.value)}\n                value={todo && todo.scoreScale ? todo.scoreScale : ''}>\n                <FormControlLabel value=\"-8\" control={<Radio />} label=\"매우나쁨\" />\n                <FormControlLabel value=\"-6\" control={<Radio />} label=\"꽤나쁨\" />\n                <FormControlLabel value=\"-4\" control={<Radio />} label=\"나쁨\" />\n                <FormControlLabel value=\"0\" control={<Radio />} label=\"보통\" />\n                <FormControlLabel value=\"3\" control={<Radio />} label=\"좋음\" />\n                <FormControlLabel value=\"6\" control={<Radio />} label=\"꽤좋음\" />\n                <FormControlLabel value=\"9\" control={<Radio />} label=\"매우좋음\" />\n              </RadioGroup>\n\n                            <Grid item xs={6}>\n                <RadioGroup row label=\"rd\" name=\"isCore\"\n                  onChange={(event) => onSetTodoProps('isCore', event.target.value)}\n                  value={todo && todo.isCore ? todo.isCore : ''}\n                  style={{ display: 'flex' }}>\n                  <FormControlLabel value=\"1\" control={<Radio />} label=\"Yes\" />\n                  <FormControlLabel value=\"0\" control={<Radio />} label=\"No\" />\n                </RadioGroup>\n              </Grid>\n\n*/ }","\nfunction generateId(length) {\n    var chars = '0123456789ABCDEFGHIJKLMNOPQRSTUVWXTZabcdefghiklmnopqrstuvwxyz'.split('');\n\n    if (! length) {\n        length = Math.floor(Math.random() * chars.length);\n    }\n\n    var str = '';\n    for (var i = 0; i < length; i++) {\n        str += chars[Math.floor(Math.random() * chars.length)];\n    }\n    return str;\n}\n\nexport default generateId;\n\nexport {\n    generateId,\n}","import React, { Component } from 'react';\nimport TodoEditFormView from '../views/TodoEditFormView';\n\nimport { inject, observer } from 'mobx-react';\nimport autobind from 'autobind-decorator';\nimport generateId from '../IDGenerator'\n\n@inject('todoStore')\n@autobind //이걸 붙여준 클래스 내에서의 바인드는 신경을 안 써도 됨. 순서는 inject담에 와야됨. \n@observer\nclass TodoEditFormContainer extends Component {\n\n\n  onSetTodoProps(name, value) {\n    this.props.todoStore.setTodoProps(name, value);\n  }\n\n  onAddTodo() {\n    let { todo } = this.props.todoStore;\n    todo = { ...todo, id: generateId(5) }\n    this.props.todoStore.addTodo(todo);\n  }\n\n  onUpdateTodo() {\n    this.props.todoStore.updateTodo();\n  }\n\n  onRemoveTodo() {\n    this.props.todoStore.removeTodo();\n  }\n\n  onSubmitDecision() {\n    this.props.todoStore.submitDecision();\n  }\n\n\n\n  render() {\n    const { todoStore } = this.props;\n    //const { test } = this.props.todoStore; 이렇게 적어도 된다.\n\n\n    return (\n      <TodoEditFormView\n        todo={todoStore.todo}\n        onSetTodoProps={this.onSetTodoProps}\n        onAddTodo={this.onAddTodo}\n        onUpdateTodo={this.onUpdateTodo}\n        onRemoveTodo={this.onRemoveTodo}\n        onSubmitDecision={this.onSubmitDecision}\n        resultNum={todoStore.resultNum}\n      />\n    )\n  }\n}\n\nexport default TodoEditFormContainer;","import React, { PureComponent } from 'react';\nimport { Table, TableContainer, TableHead, TableBody, TableRow, TableCell, Paper } from '@material-ui/core';\nimport { withStyles } from '@material-ui/core/styles';\n\nimport { observer } from 'mobx-react'\n\nimport moment from 'moment';\n\n\n\n\n\nconst styles = theme => ({\n  tableRow: {\n    \"&$selected, &$selected:hover\": {\n      backgroundColor: \"purple\"\n    }\n  },\n  tableCell: {\n    \"$selected &\": {\n      color: \"yellow\"\n    }\n  },\n  selected: {}\n})\n\n\n\n@observer\nclass TodoListView extends PureComponent {\n\n  constructor(props) {\n    super(props);\n    this.state = {};\n  }\n\n\n  render() {\n\n    //const sample = [{id: 1, title:'title1', date:'date1'}, {id: 2, title:'title2', date:'date2'}]\n    const { todos, todo, onSelectedTodo } = this.props;\n    let selectedID = this.state.selectedID;\n\n    console.log('아래는 todoObj');\n    console.log(todo);\n\n    const { classes } = this.props;\n\n    const rowSelectedHander = (todo) => {\n      this.setState({ selectedID: todo.id })\n      onSelectedTodo(todo);\n      //console.log(this.state.selectedID);\n      console.log('클릭 후 todoObj 모습');\n      console.log(todo);\n    }\n\n\n    return (\n      <TableContainer component={Paper} >\n        <Table m={3}>\n          <TableHead>\n            <TableRow>\n              <TableCell align='center'>평가목록</TableCell>\n            </TableRow>\n          </TableHead>\n          <TableBody>\n            {\n\n              Array.isArray(todos) && todos.length ?\n                todos.map((todoItem) => (\n                  <TableRow\n                    key={todoItem.id}\n                    hover\n                    onClick={() => rowSelectedHander(todoItem)}\n                    selected={todo.id === todoItem.id}\n                  >\n                    <TableCell>평가항목:{todoItem.gachi || \"\"} / 점수:{todoItem.scoreScale || 5} / 가산점:{todoItem.extraScore || 0}</TableCell>\n\n                  </TableRow>\n                ))\n                :\n                <TableRow>\n                  <TableCell>Empty</TableCell>\n                </TableRow>\n            }\n            {console.log('todos객체 변화가 있을 경우 updated된 todos 모습▼')}\n            {console.log(this.props.todos)}\n          </TableBody>\n        </Table>\n      </TableContainer>\n    )\n  }\n}\n\nexport default withStyles(styles)(TodoListView);\n\n\n\n\n{/* LEGACY\n\n\n<TableCell>{moment(todo.date).format('YYYY-MM-DD HH:mm')}</TableCell>\n\n\n*/}","import React, { Component } from 'react';\nimport TodoListView from '../views/TodoListView';\n\nimport { inject, observer } from 'mobx-react';\nimport autobind from 'autobind-decorator';\n\n@inject('todoStore')\n@autobind\n@observer\nclass TodoListContainer extends Component {\n\n\n  onSelectedTodo(todo) {\n    this.props.todoStore.selectedTodo(todo);\n  }\n\n  onSetTodoProps(name, value) {\n    this.props.todoStore.setTodoProps(name, value);\n  }\n\n\n  render() {\n\n    let { todos, searchText, todo } = this.props.todoStore;\n    //console.log(todos);\n\n    todos = todos.filter((todo) => todo.gachi === undefined ? this.onSetTodoProps('gachi', '') : todo.gachi.toLowerCase().indexOf(searchText.toLowerCase()) !== -1);\n    //console.log(todos);\n\n\n    return (\n      <TodoListView\n        todo={todo}\n        todos={todos}\n        onSelectedTodo={this.onSelectedTodo}\n      />\n    )\n  }\n}\n\nexport default TodoListContainer;","import React, { Component } from 'react';\nimport { TextField, InputAdornment, Button, Grid } from '@material-ui/core';\nimport SearchIcon from '@material-ui/icons/Search';\nimport SaveIcon from '@material-ui/icons/Save';\n\nimport { inject, observer } from 'mobx-react';\nimport autobind from 'autobind-decorator';\n\n@inject('todoStore')\n@autobind\n@observer\nclass SearchbarContainer extends Component {\n\n\n  onChangeSearchText(searchText) {\n    this.props.todoStore.setSearchText(searchText);\n  }\n\n\n\n  render() {\n\n    return (\n      <div>\n        <TextField\n          label=\"검색어\"\n          InputProps={{\n            startAdornment: (\n              <InputAdornment position=\"start\">\n                <SearchIcon />\n              </InputAdornment>\n            ),\n          }}\n          onChange={(event) => this.onChangeSearchText(event.target.value)}\n        />\n\n      </div>\n    )\n  }\n}\n\nexport default SearchbarContainer;","import React, { Component } from 'react';\r\n\r\n\r\n\r\nclass ErrorBoundary extends Component {\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = { error: null, errorInfo: null };\r\n    }\r\n\r\n    componentDidCatch(error, errorInfo) {\r\n        // Catch errors in any components below and re-render with error message\r\n        this.setState({\r\n            error: error,\r\n            errorInfo: errorInfo\r\n        })\r\n        // You can also log error messages to an error reporting service here\r\n    }\r\n\r\n    render() {\r\n        if (this.state.errorInfo) {\r\n            // Error path\r\n            return (\r\n                <div>\r\n                    <h2>Something went wrong.</h2>\r\n                    <details style={{ whiteSpace: 'pre-wrap' }}>\r\n                        {this.state.error && this.state.error.toString()}\r\n                        <br />\r\n                        {this.state.errorInfo.componentStack}\r\n                    </details>\r\n                </div>\r\n            );\r\n        }\r\n        // Normally, just render children\r\n        return this.props.children;\r\n    }\r\n}\r\n\r\nexport default ErrorBoundary;","import React, { Component } from 'react';\nimport TodoEditFormContainer from './containers/TodoEditFormContainer';\nimport TodoListContainer from './containers/TodoListContainer';\n\nimport { Box, Container } from '@material-ui/core';\nimport SearchbarContainer from './containers/SearchbarContainer';\n\nimport ErrorBoundary from './ErrorBoundary';\n//If export config is default, you don't need braces around your import component name e.g. {ErrorBoundary}. Otherwise it throws error.\n\nclass App extends Component {\n  render() {\n    return (\n      <Container >\n        <ErrorBoundary>\n          <Box m={3}><TodoEditFormContainer /></Box>\n          <Box m={3}>\n            <SearchbarContainer />\n            <TodoListContainer />\n          </Box>\n        </ErrorBoundary>\n      </Container>\n    );\n  }\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import { observable, action, computed, makeObservable, toJS } from 'mobx';\r\n//코맨트: toJS는 observable 형태의 객체를 일반 JS객체로 변환해준다. \r\n\r\nclass TodoStore {\r\n\r\n\r\n    constructor() {\r\n        makeObservable(this);\r\n        //mobx 6환경에서는 이게 있어야 데이터가 변경이 반영이 된다. \r\n    }\r\n\r\n    @observable\r\n    _todo = { scoreScale: 5, extraScore: 0 }  // id, title, date, 그리고 gachi, scoreScale, extraScore\r\n\r\n    @observable\r\n    _todos = [];\r\n\r\n    @observable\r\n    _searchText = '';\r\n\r\n    @observable\r\n    _resultNum = 0;\r\n\r\n    get todo() {\r\n        return this._todo;\r\n    }\r\n\r\n    @computed //캐싱된 걸 반환하기에 성능이 더 좋음. \r\n    get todos() {\r\n        //return this._todos ? this._todos.slice() : [];\r\n        return toJS(this._todos);\r\n    }\r\n\r\n    get searchText() {\r\n        return this._searchText;\r\n    }\r\n\r\n    @computed\r\n    get resultNum() {\r\n        return this._resultNum;\r\n    }\r\n\r\n\r\n    @action //observable 데이터를 변경할 때 action\r\n    setTodoProps(name, value) {\r\n        this._todo = {\r\n            ...this._todo,\r\n            [name]: value\r\n        }\r\n        console.log(this._todo);\r\n    }\r\n\r\n    @action\r\n    setSearchText(searchText) {\r\n        this._searchText = searchText;\r\n    }\r\n\r\n    @action\r\n    addTodo(todo) {\r\n        this._todos.push(todo);\r\n    }\r\n\r\n\r\n    @action\r\n    selectedTodo(todo) {\r\n        this._todo = todo;\r\n    }\r\n\r\n    @action\r\n    updateTodo() {\r\n        let foundTodo = this._todos.find((todo) => todo.id === this._todo.id);\r\n        foundTodo.title = this._todo.title;\r\n        foundTodo.date = this._todo.date;\r\n        foundTodo.gachi = this._todo.gachi;\r\n        foundTodo.scoreScale = this._todo.scoreScale;\r\n        foundTodo.extraScore = this._todo.extraScore;\r\n        this._todo = {};\r\n    }\r\n\r\n    @action\r\n    removeTodo() {\r\n        let index = this._todos.findIndex(todo => todo.id === this._todo.id);\r\n        if (index > -1) {\r\n            this._todos.splice(index, 1);//index부터 1개를 제거하겠다.\r\n        }\r\n\r\n        this._todo = {};\r\n    }\r\n\r\n    @action\r\n    submitDecision() {\r\n        let sum = 0;\r\n        let todos = this._todos;\r\n\r\n        for (let i = 0; i < todos.length; i++) {\r\n            sum += (Number(todos[i].scoreScale) + Number(todos[i].extraScore));\r\n        }\r\n\r\n        let resultScore = (sum * 1.0) / todos.length;\r\n        this._resultNum = resultScore.toFixed(1);\r\n    }\r\n\r\n\r\n}\r\n\r\n\r\nexport default new TodoStore();","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nimport { Provider } from 'mobx-react';\nimport TodoStore from './stores/TodoStore';\n\n\nReactDOM.render(\n  <Provider todoStore={TodoStore}>\n    <App />\n  </Provider>,\n  document.getElementById('root')\n);\n\nreportWebVitals();\n"],"sourceRoot":""}